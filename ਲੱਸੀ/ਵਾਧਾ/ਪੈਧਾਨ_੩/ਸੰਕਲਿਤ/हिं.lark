single_input : NEWLINE | simple_stmt | compound_stmt NEWLINE 
file_input : ( NEWLINE | stmt ) * 
eval_input : testlist NEWLINE * 

!decorator : "@" dotted_name [ "(" [ arguments ] ")" ] NEWLINE 
decorators : decorator + 
decorated : decorators ( classdef | funcdef | async_funcdef ) 

async_funcdef : "async" funcdef 
funcdef : "लक्षण" NAME "(" parameters ? ")" [ "->" test ] ":" suite 

!parameters : paramvalue ( "," paramvalue ) * [ "," [ starparams | kwparams ] ] 
          | starparams 
          | kwparams 
starparams : "*" typedparam ? ( "," paramvalue ) * [ "," kwparams ] 
kwparams : "**" typedparam 

?paramvalue : typedparam [ "=" test ] 
?typedparam : NAME [ ":" test ] 

!varargslist : ( vfpdef [ "=" test ] ( "," vfpdef [ "=" test ] ) * [ "," [ "*" [ vfpdef ] ( "," vfpdef [ "=" test ] ) * [ "," [ "**" vfpdef [ "," ] ] ] | "**" vfpdef [ "," ] ] ] 
  | "*" [ vfpdef ] ( "," vfpdef [ "=" test ] ) * [ "," [ "**" vfpdef [ "," ] ] ] 
  | "**" vfpdef [ "," ] ) 

vfpdef : NAME 

?stmt : simple_stmt | compound_stmt 
!?simple_stmt : small_stmt ( ";" small_stmt ) * [ ";" ] NEWLINE 
?small_stmt : ( expr_stmt | del_stmt | pass_stmt | flow_stmt | import_stmt | global_stmt | nonlocal_stmt | assert_stmt ) 
?expr_stmt : testlist_star_expr ( annassign | augassign ( yield_expr | testlist ) 
         | ( "=" ( yield_expr | testlist_star_expr ) ) * ) 
annassign : ":" test [ "=" test ] 
!?testlist_star_expr : ( test | star_expr ) ( "," ( test | star_expr ) ) * [ "," ] 
!augassign : ( "+=" | "-=" | "*=" | "@=" | "/=" | "%=" | "&=" | "|=" | "^=" | "<<=" | ">>=" | "**=" | "//=" ) 
del_stmt : "हटाओ" exprlist 
pass_stmt : "छोड़ो" 
flow_stmt : break_stmt | continue_stmt | return_stmt | raise_stmt | yield_stmt 
break_stmt : "समाप्त" 
continue_stmt : "जारी" 
return_stmt : "वापस" [ testlist ] 
yield_stmt : yield_expr 
raise_stmt : "raise" [ test [ "from" test ] ] 
import_stmt : import_name | import_from 
import_name : "import" dotted_as_names 
import_from : "from" ( dots ? dotted_name | dots ) "import" ( "*" | "(" import_as_names ")" | import_as_names ) 
!dots : "." + 
import_as_name : NAME [ "as" NAME ] 
dotted_as_name : dotted_name [ "as" NAME ] 
!import_as_names : import_as_name ( "," import_as_name ) * [ "," ] 
dotted_as_names : dotted_as_name ( "," dotted_as_name ) * 
dotted_name : NAME ( "." NAME ) * 
global_stmt : "global" NAME ( "," NAME ) * 
nonlocal_stmt : "nonlocal" NAME ( "," NAME ) * 
assert_stmt : "assert" test [ "," test ] 

compound_stmt : if_stmt | while_stmt | for_stmt | try_stmt | with_stmt | funcdef | classdef | decorated | async_stmt 
async_stmt : "async" ( funcdef | with_stmt | for_stmt ) 
if_stmt : "अगर" test ":" suite ( "परअगर" test ":" suite ) * [ "नतो" ":" suite ] 
while_stmt : "जबतक" test ":" suite [ "फ़िर" ":" suite ] 
for_stmt : "हर" exprlist testlist "से" ":" suite [ "फ़िर" ":" suite ] 
try_stmt : ( "प्रयत्न" ":" suite ( ( except_clause ":" suite ) + [ "else" ":" suite ] [ "finally" ":" suite ] | "finally" ":" suite ) ) 
with_stmt : with_item ( "," with_item ) * "केसाथ" ":" suite 
with_item : test [ "यानी" expr ] 
except_clause : [ test [ "as" NAME ] ] "सिवाय" 
suite : simple_stmt | NEWLINE INDENT stmt + DEDENT 

?test : or_test [ "अगर" or_test "नतो" test ] | lambdef 
?test_nocond : or_test | lambdef_nocond 
lambdef : "lambda" [ varargslist ] ":" test 
lambdef_nocond : "lambda" [ varargslist ] ":" test_nocond 
?or_test : and_test ( "या" and_test ) * 
?and_test : not_test ( "और" not_test ) * 

?not_test : "न" not_test -> not 
         | comparison 
?comparison : expr ( _comp_op expr ) * 
star_expr : "*" expr 
?expr : xor_expr ( "|" xor_expr ) * 
?xor_expr : and_expr ( "^" and_expr ) * 
?and_expr : shift_expr ( "&" shift_expr ) * 
?shift_expr : arith_expr ( _shift_op arith_expr ) * 
?arith_expr : term ( _add_op term ) * 
?term : factor ( _mul_op factor ) * 
?factor : _factor_op factor | power 

!_factor_op : "+" | "-" | "~" 
!_add_op : "+" | "-" 
!_shift_op : "<<" | ">>" 
!_mul_op : "*" | "@" | "/" | "%" | "//" 
!_comp_op : "<" | ">" | "==" | ">=" | "<=" | "<>" | "!=" | "in" | "not" "in" | "is" | "is" "not" 

?power : await_expr [ "**" factor ] 
await_expr : AWAIT ? atom_expr 
AWAIT : "await" 

?atom_expr : atom_expr "(" [ arguments ] ")" -> funccall 
          | atom_expr "[" subscriptlist "]" -> getitem 
          | atom_expr "." NAME -> getattr 
          | atom 

?atom : "(" [ yield_expr | testlist_comp ] ")" -> tuple 
     | "[" [ testlist_comp ] "]" -> list 
     | "{" [ dictorsetmaker ] "}" -> dict 
     | NAME -> var 
     | number | string + 
     | "(" test ")" 
     | "..." -> ellipsis 
     | "कुछनहीं" -> const_none 
     | "सच" -> const_true 
     | "असत्य" -> const_false 

!?testlist_comp : ( test | star_expr ) [ comp_for | ( "," ( test | star_expr ) ) + [ "," ] | "," ] 
!subscriptlist : subscript ( "," subscript ) * [ "," ] 
subscript : test | [ test ] ":" [ test ] [ sliceop ] 
sliceop : ":" [ test ] 
!exprlist : ( expr | star_expr ) ( "," ( expr | star_expr ) ) * [ "," ] 
!testlist : test ( "," test ) * [ "," ] 
!dictorsetmaker : ( ( ( test ":" test | "**" expr ) ( comp_for | ( "," ( test ":" test | "**" expr ) ) * [ "," ] ) ) | ( ( test | star_expr ) ( comp_for | ( "," ( test | star_expr ) ) * [ "," ] ) ) ) 

classdef : "वर्ग" NAME [ "(" [ arguments ] ")" ] ":" suite 

!arguments : argvalue ( "," argvalue ) * [ "," [ starargs | kwargs ] ] 
         | starargs 
         | kwargs 
         | test comp_for 

!starargs : "*" test ( "," "*" test ) * ( "," argvalue ) * [ "," kwargs ] 
kwargs : "**" test 

?argvalue : test [ "=" test ] 

comp_iter : comp_for | comp_if | async_for 
async_for : "async" "for" exprlist "in" or_test [ comp_iter ] 
comp_for : "हर" exprlist or_test "से" [ comp_iter ] 
comp_if : "अगर" test_nocond [ comp_iter ] 

encoding_decl : NAME 

yield_expr : "yield" [ yield_arg ] 
yield_arg : "from" test | testlist 


number : DEC_NUMBER | HEX_NUMBER | OCT_NUMBER | FLOAT_NUMBER | IMAG_NUMBER 
string : STRING | LONG_STRING 
NAME : /[a-zA-Z_]\w*/ 
COMMENT : /#[^\n]*/ 
NEWLINE : ( /\r?\n[\t ]*/ | COMMENT ) + 


STRING : /[ubf]?r?("(?!"").*?(?<!\\)(\\\\)*?"|'(?!'').*?(?<!\\)(\\\\)*?')/i 
LONG_STRING : /[ubf]?r?(""".*?(?<!\\)(\\\\)*?"""|'''.*?(?<!\\)(\\\\)*?''')/is 

DEC_NUMBER : /0|[1-9]\d*/i 
HEX_NUMBER . 2 : /0x[\da-f]*/i 
OCT_NUMBER . 2 : /0o[0-7]*/i 
BIN_NUMBER . 2 : /0b[0-1]*/i 
FLOAT_NUMBER . 2 : /((\d+\.\d*|\.\d+)(e[-+]?\d+)?|\d+(e[-+]?\d+))/i 
IMAG_NUMBER . 2 : /\d+j|${FLOAT_NUMBER}j/i 

%ignore /[\t \f]+/ 
%ignore /\\[\t \f]*\r?\n/ 
%ignore COMMENT 
%declare INDENT DEDENT 